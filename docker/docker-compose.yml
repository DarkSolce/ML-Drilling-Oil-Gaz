version: '3.8'

services:
  # ML Drilling API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: api-only
    container_name: drilling-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DRILLING_LOG_LEVEL=INFO
      - DRILLING_API_PORT=8000
      - DRILLING_DATA_PATH=/app/data
      - DRILLING_MODEL_PATH=/app/models
    volumes:
      - ./data:/app/data:ro
      - ./models:/app/models:rw
      - ./outputs:/app/outputs:rw
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - drilling-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.drilling-api.rule=Host(`api.drilling.localhost`)"
      - "traefik.http.services.drilling-api.loadbalancer.server.port=8000"

  # ML Drilling Dashboard Service  
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile
      target: dashboard-only
    container_name: drilling-dashboard
    restart: unless-stopped
    ports:
      - "8501:8501"
    environment:
      - DRILLING_DASHBOARD_PORT=8501
      - DRILLING_DATA_PATH=/app/data
      - DRILLING_MODEL_PATH=/app/models
    volumes:
      - ./data:/app/data:ro
      - ./models:/app/models:ro
      - ./outputs:/app/outputs:rw
    depends_on:
      - api
    networks:
      - drilling-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.drilling-dashboard.rule=Host(`dashboard.drilling.localhost`)"
      - "traefik.http.services.drilling-dashboard.loadbalancer.server.port=8501"

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: drilling-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - drilling-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for data storage (optional)
  postgres:
    image: postgres:15-alpine
    container_name: drilling-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=drilling_db
      - POSTGRES_USER=drilling_user
      - POSTGRES_PASSWORD=drilling_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - drilling-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U drilling_user -d drilling_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: drilling-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - dashboard
    networks:
      - drilling-network

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: drilling-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - drilling-network

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: drilling-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=drilling_admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - drilling-network

networks:
  drilling-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Development override
---
# docker-compose.override.yml (for development)
version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: application
    volumes:
      - .:/app
    environment:
      - DRILLING_LOG_LEVEL=DEBUG
    command: ["uvicorn", "src.api.app:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  dashboard:
    build:
      context: .
      dockerfile: Dockerfile  
      target: application
    volumes:
      - .:/app
    command: ["streamlit", "run", "src/visualization/dashboard.py", "--server.port", "8501", "--server.address", "0.0.0.0"]